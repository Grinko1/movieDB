{"version":3,"sources":["images/react-movie-logo.svg","images/tmdb_logo.svg","components/Header/Header.styles.js","components/Header/index.js","config.js","API.js","helpers.js","hooks/useHomeFetch.js","images/no_image.jpg","components/HeroImage/HeroImage.styles.js","components/HeroImage/index.js","components/Grid/Grid.style.js","components/Grid/index.js","components/Thumb/Thumb.style.js","components/Thumb/index.js","components/Spinner/index.js","components/Spinner/Spinner.style.js","components/SearchBar/SearchBar.style.js","images/search-icon.svg","components/SearchBar/index.js","components/Button/Button.styles.js","components/Button/index.js","components/Home.js","components/BreadCrumb/BreadCrumb.styles.js","components/BreadCrumb/index.js","components/MovieInfo/MovieInfo.styles.js","components/MovieInfo/index.js","components/MovieInfoBar/MovieInfoBar.styles.js","components/MovieInfoBar/index.js","components/Actor/Actor.styles.js","components/Actor/index.js","components/Movie.js","hooks/useMovieFetch.js","components/NotFound.js","GlobalStyle.js","App.js","index.js"],"names":["Wrapper","styled","div","Content","LogoImg","img","TMDBLogoImg","Header","to","src","RMDBLogo","alt","TMDBLogo","API_URL","API_KEY","process","SEARCH_BASE_URL","POPULAR_BASE_URL","REQUEST_TOKEN_URL","LOGIN_URL","SESSION_ID_URL","IMAGE_BASE_URL","BACKDROP_SIZE","POSTER_SIZE","defaultConfig","method","headers","apiSettings","fetchMovies","searchTerm","page","a","endpoint","fetch","json","fetchMovie","movieId","fetchCredits","creditsEndpoint","getRequestToken","reqToken","request_token","authenticate","requestToken","username","password","bodyData","body","JSON","stringify","success","sessionId","rateMovie","value","rating","calcTime","time","hours","Math","floor","mins","convertMoney","money","Intl","NumberFormat","style","currency","minimumFractionDigits","format","isPersistedState","stateName","sessionState","sessionStorage","getItem","parse","initialState","results","total_pages","total_results","image","Text","HeroImage","title","text","Grid","header","children","Image","Thumb","clickalbe","Spinner","SearchBar","setSearchTerm","useState","state","setState","initial","useRef","useEffect","current","timer","setTimeout","clearTimeout","searchIcon","type","placeholder","onChange","event","currentTarget","button","Button","callback","onClick","Home","loading","setLoading","error","setError","isLoadingMore","setIsLoadingMore","console","log","API","movies","prev","setItem","useHomeFetch","backdrop_path","original_title","overview","map","movie","poster_path","NoImage","id","BreadCrumb","movieTitle","backdrop","MovieInfo","className","vote_average","directors","length","director","name","credit_id","propTypes","PropTypes","number","budget","revenue","MovieInfoBar","Actor","character","imageUrl","Movie","credits","crew","filter","member","job","actors","cast","useMovieFetch","useParams","runtime","actor","profile_path","NotFound","GlobalStyle","createGlobalStyle","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fe6d8e6a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/react-movie-logo.42955eb6.svg\";","export default __webpack_public_path__ + \"static/media/tmdb_logo.f15b6632.svg\";","import styled from 'styled-components'\n\n\nexport const Wrapper = styled.div`\n    background: var(--darkGrey);\n    padding:0px 20px;\n\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  max-width: var(--maxWidth);\n  padding: 20px 0;\n  margin: 0 auto;\n`;\n\nexport const LogoImg = styled.img`\n    width: 200px;\n\n    @media screen and (max-width: 500px) {\n        width: 150px;\n      }\n`;\n\nexport const TMDBLogoImg = styled.img`\nwidth: 100px;\n\n@media screen and (max-width: 500px) {\n  width: 80px;\n}\n`;","import React from 'react'\n\nimport {Link} from 'react-router-dom'\nimport RMDBLogo from '../../images/react-movie-logo.svg'\nimport TMDBLogo from '../../images/tmdb_logo.svg'\nimport {Wrapper, Content, LogoImg, TMDBLogoImg} from './Header.styles'\n\n\nconst Header = () => (\n    <Wrapper>\n        <Content>\n            <Link to='/'>\n            <LogoImg src={RMDBLogo}  alt=\"broken\"/>\n            </Link>\n            \n            <TMDBLogoImg src={TMDBLogo}  alt=\"broken\"/>\n        </Content>\n    </Wrapper>\n)\nexport default Header","// Configuration for TMDB API\n// Read more about the API here: https://developers.themoviedb.org/\n\nconst API_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nconst SEARCH_BASE_URL = `${API_URL}search/movie?api_key=${API_KEY}&language=en-US&query=`;\nconst POPULAR_BASE_URL = `${API_URL}movie/popular?api_key=${API_KEY}&language=en-US`;\n// For login and voting\nconst REQUEST_TOKEN_URL = `${API_URL}authentication/token/new?api_key=${API_KEY}`;\nconst LOGIN_URL = `${API_URL}authentication/token/validate_with_login?api_key=${API_KEY}`;\nconst SESSION_ID_URL = `${API_URL}authentication/session/new?api_key=${API_KEY}`;\n\nconst IMAGE_BASE_URL = 'http://image.tmdb.org/t/p/';\n// Sizes: w300, w780, w1280, original\nconst BACKDROP_SIZE = 'w1280';\n// w92, w154, w185, w342, w500, w780, original\nconst POSTER_SIZE = 'w780';\n\nexport {\n  SEARCH_BASE_URL,\n  POPULAR_BASE_URL,\n  API_URL,\n  API_KEY,\n  IMAGE_BASE_URL,\n  BACKDROP_SIZE,\n  POSTER_SIZE,\n  REQUEST_TOKEN_URL,\n  LOGIN_URL,\n  SESSION_ID_URL,\n};\n","import {\n  SEARCH_BASE_URL,\n  POPULAR_BASE_URL,\n  API_URL,\n  API_KEY,\n  REQUEST_TOKEN_URL,\n  LOGIN_URL,\n  SESSION_ID_URL\n} from './config';\n\nconst defaultConfig = {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n};\n\nconst apiSettings = {\n  fetchMovies: async (searchTerm, page) => {\n    const endpoint = searchTerm\n      ? `${SEARCH_BASE_URL}${searchTerm}&page=${page}`\n      : `${POPULAR_BASE_URL}&page=${page}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchMovie: async movieId => {\n    const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchCredits: async movieId => {\n    const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n    return await (await fetch(creditsEndpoint)).json();\n  },\n  // Bonus material below for login\n  getRequestToken: async () => {\n    const reqToken = await (await fetch(REQUEST_TOKEN_URL)).json();\n    return reqToken.request_token;\n  },\n  authenticate: async (requestToken, username, password) => {\n    const bodyData = {\n      username,\n      password,\n      request_token: requestToken\n    };\n    // First authenticate the requestToken\n    const data = await (\n      await fetch(LOGIN_URL, {\n        ...defaultConfig,\n        body: JSON.stringify(bodyData)\n      })\n    ).json();\n    // Then get the sessionId with the requestToken\n    if (data.success) {\n      const sessionId = await (\n        await fetch(SESSION_ID_URL, {\n          ...defaultConfig,\n          body: JSON.stringify({ request_token: requestToken })\n        })\n      ).json();\n      return sessionId;\n    }\n  },\n  rateMovie: async (sessionId, movieId, value) => {\n    const endpoint = `${API_URL}movie/${movieId}/rating?api_key=${API_KEY}&session_id=${sessionId}`;\n\n    const rating = await (\n      await fetch(endpoint, {\n        ...defaultConfig,\n        body: JSON.stringify({ value })\n      })\n    ).json();\n\n    return rating;\n  }\n};\n\nexport default apiSettings;\n","// Convert time to hours and minutes\nexport const calcTime = time => {\n  const hours = Math.floor(time / 60);\n  const mins = time % 60;\n  return `${hours}h ${mins}m`;\n};\n// Convert a number to money formatting\nexport const convertMoney = money => {\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n  });\n  return formatter.format(money);\n};\n\nexport const isPersistedState = stateName => {\n  const sessionState = sessionStorage.getItem(stateName)\n  return sessionState && JSON.parse(sessionState)\n}","import { useEffect } from 'react';\nimport { useState } from 'react';\nimport API from '../API'\nimport {isPersistedState} from '../helpers'\n\n\nconst initialState = {\n    page:0,\n    results:[],\n    total_pages: 0,\n    total_results:0\n}\n\nexport const useHomeFetch =()=>{\n    const [searchTerm, setSearchTerm] = useState('')\n    const [state, setState] = useState(initialState)\n    const [loading, setLoading] = useState(false)\n    const [error, setError] = useState(false)\n    const [isLoadingMore, setIsLoadingMore] = useState(false)\n\n    console.log(searchTerm)\n\n\n    const fetchMovies = async (page, searchTerm)=>{\n        try {\n            setError(false)\n            setLoading(true)\n\n            const movies = await API.fetchMovies(searchTerm, page)\n            console.log(movies)\n\n            setState(prev =>({\n                ...movies, \n                results:\n                page > 1 ? [ ...prev.results, ...movies.results] : [...movies.results]\n            }))\n        } catch (error) {\n            setError(true)\n        }\n        setLoading(false)\n    }\n\n    //initial and search\n\n    useEffect(()=>{\n\n        if(!searchTerm) {\n            const sessionState = isPersistedState('homeState')\n\n            if(sessionState) {\n                console.log('grabbing from sessionStorage')\n                setState(sessionState)\n                return\n            }\n        }\n        console.log('grabbing from API')\n        setState(initialState)\n        fetchMovies(1, searchTerm)\n    },[searchTerm])\n\n    //load more\n\n    useEffect(()=>{\n        if(!isLoadingMore) return;\n\n        fetchMovies(state.page +1, searchTerm)\n        setIsLoadingMore(false)\n\n    },[isLoadingMore, searchTerm, state.page])\n    \n\n    // write to session storage\n\n    useEffect(()=>{\n        if(!searchTerm) sessionStorage.setItem('homeState', JSON.stringify(state))\n\n    },[searchTerm, state])\n\n\n    return {state, loading, error, setSearchTerm, searchTerm, setIsLoadingMore}\n\n}","export default __webpack_public_path__ + \"static/media/no_image.22d2aa4d.jpg\";","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  background: linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0) 41%,\n      rgba(0, 0, 0, 0.65) 100%\n    ),\n    url(${({ image }) => image}), var(--darkGrey);\n  background-size: 100%, cover;\n  background-position: center;\n  height: 600px;\n  position: relative;\n  animation: animateHeroImage 1s;\n\n  @keyframes animateHeroImage {\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }\n  }\n`;\n\nexport const Content = styled.div`\n  padding: 20px;\n  max-width: var(--maxWidth);\n  margin: 0 auto;\n`;\n\nexport const Text = styled.div`\n  z-index: 100;\n  max-width: 700px;\n  position: absolute;\n  bottom: 40px;\n  margin-right: 20px;\n  min-height: 100px;\n  color: var(--white);\n\n  h1 {\n    font-size: var(--fontSuperBig);\n\n    @media screen and (max-width: 720px) {\n      font-size: var(--fontBig);\n    }\n  }\n\n  p {\n    font-size: var(--fontMed);\n\n    @media screen and (max-width: 720px) {\n      font-size: var(--fontSmall);\n    }\n  }\n\n  @media screen and (max-width: 720px) {\n    max-width: 100%;\n  }\n`;\n","import React from 'react'\nimport PropTypes from 'prop-types';\nimport {Wrapper, Content, Text} from './HeroImage.styles'\n\nconst HeroImage = ({image, title, text}) => {\n    return (\n        <Wrapper image={image}>\n            <Content>\n                <Text>\n                    <h1>{title}</h1>\n                    <p>{text}</p>\n                </Text>\n            </Content>\n\n        </Wrapper>\n    )\n}\nHeroImage.propTypes = {\n    image: PropTypes.string,\n    title: PropTypes.string,\n    text: PropTypes.string\n\n}\nexport default HeroImage","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n\n        max-width: var(--maxWidth);\n        margin: 0 auto;\n        padding: 0 20px;\n\n\n        h1{\n            color:var(--medGrey);\n\n            @media screen  and (max-width: 760px){\n                font-size:var(--fontBig)\n            }\n\n        }\n`;\n\nexport const Content = styled.div`\n\n        display: grid;\n        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n        grid-gap: 2rem;\n`;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Wrapper, Content} from './Grid.style'\n\nconst Grid = ({header, children}) => {\n    return (\n        <Wrapper>\n            <h1>{header}</h1>\n            <Content>{children}</Content>\n            \n        </Wrapper>\n    );\n};\n\nGrid.propTypes = {\n    header: PropTypes.string,\n \n}\n\nexport default Grid;","import styled from 'styled-components';\n\nexport const Image= styled.img`\n        width: 100%;\n        max-width: 720px;\n        transition: all 0.3s;\n        object-fit: cover;\n        border-radius: 20px;\n        animation: animateThumb 0.5s;\n\n        :hover{\n            opacity: 0.8;\n        }\n\n        @keyframes animateThumb {\n            from {\n                opacity: 0;\n            }\n            to{\n                opacity: 1;\n            }\n            \n        }\n`","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link} from 'react-router-dom'\nimport {Image} from './Thumb.style'\n\nconst Thumb = ({image, movieId, clickalbe}) => {\n    return (\n        <div>\n            {\n                clickalbe ? (\n                    <Link to={`/${movieId}`}>\n                         <Image src={image} alt=\"disapirance\" />\n                    </Link>\n                ) : (\n                    <Image src={image} alt=\"disapirance\" />\n                )\n            }\n       \n        </div>\n    );\n};\nThumb.propTypes = {\n    image: PropTypes.string,\n    movieId: PropTypes.number,\n    clickalbe:PropTypes.bool\n}\nexport default Thumb;","import {Spinner} from './Spinner.style'\n\n\n\nexport default Spinner;","import styled from 'styled-components';\n\nexport const Spinner = styled.div`\n  border: 5px solid var(--lightGrey);\n  border-top: 5px solid var(--medGrey);\n  border-radius: 50%;\n  width: 50px;\n  height: 50px;\n  animation: spin 0.8s linear infinite;\n  margin: 20px auto;\n\n  @keyframes spin {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n    display:flex;\n    align-items: center;\n    height: 100px;\n    background: var(--darkGrey);\n    padding: 0 20px;\n`;\n\nexport const Content = styled.div`\n    position: relative;\n    max-width: var(--maxWigth);\n    width: 100%;\n    height: 55px;\n    background: var(--medGrey);\n    margin: 0 auto;\n    border-radius: 40px;\n    color: var (--white);\n\n    img{\n        position: absolute;\n        left: 15px;\n        top: 14px;\n        width: 30px;\n    }\n\n    input{\n        font-size: var(--fontBig);\n        position: absolute;\n        left: 0;\n        margin: 8px 0;\n        padding: 0 0 0 60px;\n        border: 1px solid var(--lightGrey);\n        border-radius: 40px;\n        width: 95%;\n        background: transparent;\n        height: 40px;\n        color: var(--white);\n\n        :focus{\n            outline:none;\n        }\n    }\n`;","export default __webpack_public_path__ + \"static/media/search-icon.cd820f5a.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Content, Wrapper } from './SearchBar.style';\nimport searchIcon from '../../images/search-icon.svg'\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { useRef } from 'react';\n\nconst SearchBar = ({setSearchTerm}) => {\n    const [state, setState] = useState('')\n\n    const initial =  useRef(true)\n\n    useEffect(()=>{\n        if(initial.current){\n            initial.current = false\n            return\n        }\n\n        const  timer = setTimeout(()=>{\n            setSearchTerm(state)\n        },500)\n        return () => clearTimeout(timer)\n    },[setSearchTerm, state])\n    return (\n        <Wrapper>\n            <Content>\n            <img src={searchIcon} alt=\"searc\"/>\n            <input \n                    type=\"text\" \n                    placeholder=\"Search Movie\" \n                    onChange={event => setState(event.currentTarget.value)}\n                    value={state}\n                    />\n            </Content>\n            \n        </Wrapper>\n    );\n};\nSearchBar.propTypes = {\n    setSearchTerm: PropTypes.func\n}\n\nexport default SearchBar; ","import styled from 'styled-components';\n\nexport const Wrapper = styled.button`\n\n    display: block;\n    background: var(--darkGrey);\n    width: 25%;\n    min-width: 200px;\n    height: 60px;\n    border-radius: 30px;\n    color:var(--white);\n    border: 0;\n    font-size: var(--fontBig) ;\n    margin: 20px auto;\n    transition: all 0.3s;\n    outline: none;\n    cursor: pointer;\n    :hover{\n        opacity: 0.8;\n    }\n`;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Wrapper} from './Button.styles'\n\nconst Button = ({text,callback}) => {\n    return (\n        <Wrapper type=\"button\" onClick={callback} >\n            {text}\n        </Wrapper>\n    );\n};\n\nButton.propTypes = {\n    text: PropTypes.string,\n    callback: PropTypes.func\n}\nexport default Button;","import React from 'react';\nimport { useHomeFetch} from '../hooks/useHomeFetch'\nimport {IMAGE_BASE_URL, BACKDROP_SIZE, POSTER_SIZE,} from '../config'\nimport NoImage from '../images/no_image.jpg' \nimport HeroImage from './HeroImage';\nimport Grid from './Grid/index'\nimport Thumb from './Thumb';\nimport Spinner from './Spinner';\nimport SearchBar from './SearchBar';\nimport Button from './Button'\n\nconst Home = () => {\n    \n    const {state, loading, error, setSearchTerm, searchTerm, setIsLoadingMore} = useHomeFetch()\n\n    console.log(state)\n\n    if(error) return <div>Something went wrong ...</div>\n\n    return (\n        <>\n          {!searchTerm &&  state.results[0] ?\n          <HeroImage image={`${IMAGE_BASE_URL}${BACKDROP_SIZE}${state.results[0].backdrop_path}`}\n                        title={state.results[0].original_title}\n                        text={state.results[0].overview}\n                        /> \n          : null\n\n          }\n          <SearchBar setSearchTerm={setSearchTerm} />\n          <Grid header={searchTerm ? \"Search Result\" :\"Popular Movies\"}>\n            {state.results.map(movie => (\n              <Thumb key={movie.id}\n                     clickalbe={true}\n                     image={\n                       movie.poster_path ? IMAGE_BASE_URL + POSTER_SIZE + movie.poster_path\n                       : NoImage\n                     } \n                     movieId = {movie.id}\n              />\n           \n            ))}\n          </Grid>\n          {loading && <Spinner/>}\n          {\n            state.page < state.total_pages && !loading && (\n              <Button text=\"Load more\" callback={()=>setIsLoadingMore(true)}/>\n            )\n          }\n        </>\n    );\n};\n\nexport default Home;","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 70px;\n  // background: var(--darkGrey);\n  background:  #353535;\n  color: var(--white);\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  width: 100%;\n  max-width: var(--maxWidth);\n  padding: 0 20px;\n\n  span {\n    font-size: var(--fontMed);\n    color: var(--white);\n    padding-right: 10px;\n\n    @media screen and (max-width: 768px) {\n      font-size: var(--fontSmall);\n    }\n  }\n`;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link} from 'react-router-dom'\nimport {Wrapper, Content} from './BreadCrumb.styles'\n\nconst BreadCrumb = ({ movieTitle }) => (\n    <Wrapper>\n      <Content>\n        <Link to='/'>\n          <span>Home</span>\n        </Link>\n        <span>|</span>\n        <span>{movieTitle}</span>\n      </Content>\n    </Wrapper>\n  );\n\n  BreadCrumb.propTypes ={\n    movieTitle: PropTypes.string\n  }\n\nexport default BreadCrumb;","import styled from 'styled-components';\nimport { IMAGE_BASE_URL, BACKDROP_SIZE } from '../../config';\n\nexport const Wrapper = styled.div`\n  background: ${({ backdrop }) =>\n    backdrop ? `url(${IMAGE_BASE_URL}${BACKDROP_SIZE}${backdrop})` : '#000'};\n  background-size: cover;\n  background-position: center;\n  padding: 40px 20px;\n  animation: animateMovieInfo 1s;\n\n  @keyframes animateMovieInfo {\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }\n  }\n`;\n\nexport const Content = styled.div`\n        display: flex;\n        max-width: var(--maxWidth);\n        margin: 0 auto;\n        background: rgba(0, 0, 0, 0.7);\n        border-radius: 20px;\n\n        @media screen and (max-width: 768px) {\n            display: block;\n            max-height: none;\n        }\n        `;\n\n\n\nexport const Text = styled.div`\n  width: 100%;\n  padding: 20px 40px;\n  color: var(--white);\n  overflow: hidden;\n\n    .rating-directors {\n        display: flex;\n        justify-content: flex-start;\n    }\n\n        .score {\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            width: 35px;\n            height: 35px;\n            background: #fff;\n            color: #000;\n            font-weight: 800;\n            border-radius: 50%;\n            margin: 0;\n        }\n\n  .director {\n    margin: 0 0 0 40px;\n\n    p {\n      margin: 0;\n    }\n  }\n\n  h1 {\n    @media screen and (max-width: 768px) {\n      font-size: var(--fontBig);\n    }\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Wrapper, Content,Text} from './MovieInfo.styles'\nimport Thumb from '../Thumb'\nimport {IMAGE_BASE_URL, POSTER_SIZE} from '../../config'\nimport NoImage from '../../images/no_image.jpg'\n\n\nconst MovieInfo = ({movie}) => {\n    return (\n        <Wrapper backdrop={movie.backdrop_path}>\n            <Content>\n                <Thumb \n                        image={\n                            movie.poster_path\n                            ? `${IMAGE_BASE_URL}${POSTER_SIZE}${movie.poster_path}` \n                            : NoImage\n                        }  \n                        clickalbe={false}\n                        alt=\"movie-thumb\"  />\n                        <Text>\n                            <h1>{movie.title}</h1>\n                            <h3>PLOT</h3>\n                            <p>{movie.overview}</p>\n\n\n                            <div className=\"rating-directors\">\n                                <div>\n                                    <h3>RATING</h3>\n                                    <div className=\"score\">{movie.vote_average} </div>\n                                </div>\n                                <div className=\"director\">\n                                <h3>DIRECTOR {movie.directors.length > 1 ? 'S' : ''}</h3>\n                                {\n                                    movie.directors.map(director => (\n                                        <p key={director.credit_id}> {director.name}</p>\n                                    ))\n                                }\n                                </div>\n                            </div>\n                        </Text>\n            </Content>\n            \n        </Wrapper>\n    );\n};\n\nMovieInfo.propTypes= {\n    movie: PropTypes.object\n}\n\nexport default MovieInfo;","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n    display: flex;\n    align-items:center;\n    min-height: 100px;\n    background: var(--darkGrey);\n    padding: 0 20px;\n    `;\n\nexport const Content = styled.div`\n        display: flex;\n        max-width:  var(--maxWidth);\n        width: 100%;\n        margin: 0 auto;\n\n      .column{\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        background: #353535;\n        border-radius: 20px;\n        margin: 0 20px;\n        flex: 1;\n\n        :first-child{\n            margin-left:0;\n        }\n        :last-child{\n            margin-right:0;\n        }\n      }  \n\n      @media screen and (max-width: 768px) {\n        display: block;\n    \n        .column{\n            margin: 20px 0;\n        }\n    }\n`;","import React from 'react';\nimport {calcTime, convertMoney} from '../../helpers'\nimport {Wrapper, Content} from './MovieInfoBar.styles'\nimport PropTypes from 'prop-types';\nimport MovieInfo from '../MovieInfo';\n\nconst MovieInfoBar = ({time, budget, revenue}) => {\n    return (\n        <Wrapper>\n            <Content>\n                <div className=\"column\">\n                    <p>Running time: {calcTime(time)}</p>\n                </div>\n                <div className=\"column\">\n                    <p>Budget: {convertMoney(budget)}</p>\n                </div>\n                <div className=\"column\">\n                    <p>Revenue: {convertMoney(revenue)}</p>\n                </div>\n            </Content>\n            \n        </Wrapper>\n    );\n};\n\nMovieInfo.propTypes = {\n    time: PropTypes.number,\n    budget: PropTypes.number,\n    revenue: PropTypes.number\n}\nexport default MovieInfoBar;","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n\n    color: var(--white);\n    background: var(--darkGrey);\n    border-radius: 20px;\n    padding: 5px;\n    text-align: center;\n\n    h3{\n        margin: 10px 0 0 0;\n\n    }\n    p{\n        margin: 5px 0 ;\n    }\n`;\n\nexport const Image = styled.img`\n\n        display: block;\n        width: 100%;\n        height: 200px;\n        object-fit: cover;\n        border-radius: 15px;\n\n`;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Wrapper, Image} from './Actor.styles'\n\nconst Actor = ({name, character, imageUrl}) => {\n    return (\n        <Wrapper>\n            <Image src={imageUrl} alt=\"actor\"/>\n            <h3>{name}</h3>\n            <p>{character}</p>\n        </Wrapper>\n    );\n};\n\nActor.propTypes = {\n    name: PropTypes.string,\n    character: PropTypes.string,\n    imageUrl:PropTypes.string\n}\n\nexport default Actor;","import React from 'react';\nimport {IMAGE_BASE_URL, POSTER_SIZE} from '../config'\nimport Grid from './Grid'\nimport Spinner from './Spinner'\nimport NoImage from '../images/no_image.jpg'\nimport {useMovieFetch} from '../hooks/useMovieFetch'\nimport { useParams } from 'react-router-dom';\nimport BreadCrumb from './BreadCrumb';\nimport MovieInfo from './MovieInfo';\nimport MovieInfoBar from './MovieInfoBar';\nimport Actor from './Actor'\n\nconst Movie = () => {\n    const {movieId} = useParams()\n\n    const{state: movie, loading, error} = useMovieFetch(movieId)\n    console.log(movie)\n\n    if(loading) return <Spinner/>\n    if(error) return <div>Something went wrong ... </div>\n\n\n\n    return (\n        <>\n           <BreadCrumb movieTitle={movie.original_title} />\n           <MovieInfo movie={movie} />\n           <MovieInfoBar time={movie.runtime}\n                         budget={movie.budget}\n                         revenue={movie.revenue} />\n            <Grid header='Actors'>\n                {movie.actors.map(actor => (\n                    <Actor \n                            key={actor.credit_id}\n                            name={actor.name}\n                            character={actor.character}\n                            imageUrl={\n                                actor.profile_path\n                                ? `${IMAGE_BASE_URL}${POSTER_SIZE}${actor.profile_path}`\n                                : NoImage\n                            }\n                    />\n                ))}\n                </Grid>             \n        </>\n    );\n};\n\nexport default Movie;","import{ useEffect, useState } from 'react'\nimport API from '../API'\nimport {isPersistedState} from '../helpers'\n\n\n\nexport const useMovieFetch = movieId => {\n    const [state, setState] = useState({})\n    const [loading, setLoading] = useState(true)\n    const [error, setError] = useState(false)\n\n\n    useEffect(()=>{\n        const fetchMovie = async () => {\n            try {\n                setLoading(true)\n                setError(false)\n\n                const movie = await API.fetchMovie(movieId)\n                const credits = await API.fetchCredits(movieId)\n                //get directors only\n                const directors = credits.crew.filter(\n                    member => member.job === 'Director'\n                )\n\n                setState({\n                    ...movie,\n                    actors: credits.cast,\n                    directors\n                })\n                setLoading(false)\n\n            } catch (error) {\n                setError(true)\n            }\n        }\n\n\n        const sessionState = isPersistedState(movieId)\n            if(sessionState){\n                setState(sessionState)\n                setLoading(false)\n                return\n            }\n\n        fetchMovie()\n    },[movieId])\n\n    //write to sessionStorage\n\n    useEffect(()=>{\n        sessionStorage.setItem(movieId, JSON.stringify(state))\n    },[movieId, state])\n\n    return {state, loading, error}\n}","import React from 'react';\n\nconst NotFound = () => {\n    return (\n        <div>\n            NotFound\n        </div>\n    );\n};\n\nexport default NotFound;","import {createGlobalStyle} from 'styled-components'\n\nexport const GlobalStyle = createGlobalStyle`\n    :root{\n        --maxWidth: 1280px;\n        --white:#fff;\n        --lightGrey:#eee;\n        --midGrey: #353535;\n        --darkGrey: #1c1c1c;\n        --fontSuperBig: 2.5rem;\n        --fontBig: 1.5rem;\n        --fontMed: 1.2rem;\n        --fontSmall: 1rem;\n\n    }\n    *{\n        box-sizing: border-box;\n        font-family: 'Abel', sans-serif;\n\n    }\n    body{\n        margin:0;\n        padding:0;\n\n        h1{\n            font-size: 2rem;\n            font-weight: 600;\n            color: var(--white);\n        }\n        h3{\n            font-size: 1.1rem;\n            font-weight: 600;\n        }\n        p{\n            font-size: 1rem;\n            color: var(--white);\n        }\n    }\n\n\n`","import React from 'react';\nimport {BrowserRouter as Router, Routes, Route} from 'react-router-dom'\nimport Header from './components/Header';\nimport Home from './components/Home';\nimport Movie from './components/Movie';\nimport NotFound from './components/NotFound';\n\nimport {GlobalStyle} from './GlobalStyle'\n\nconst  App = () =>(\n    <Router>\n      <Header/>\n      <Routes>\n        <Route path='/' element={<Home/>} />\n        <Route path= '/:movieId' element={<Movie/>}/>\n        <Route path='/*' element={<NotFound/>} />\n      </Routes>\n      \n      <GlobalStyle/>\n    </Router>\n  );\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}